
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Если Параметры.Свойство("ИдентификаторКоманды") тогда
	//	ИдентификаторКоманды = Параметры.ИдентификаторКоманды;
	//Иначе
	//	ИдентификаторКоманды = "РассчитатьБольничныйЛист";
	//КонецЕсли;
	//
	//Если ИдентификаторКоманды = "РассчитатьУвольнение" тогда
	//	ВидДокумента = "Увольнение";
	//ИначеЕсли ИдентификаторКоманды = "РассчитатьОтпуск" тогда
	//	ВидДокумента = "Отпуск";
	//ИначеЕсли ИдентификаторКоманды = "РассчитатьБольничныйЛист" тогда
	//	ВидДокумента = "БольничныйЛист";
	//Иначе
	//	ВидДокумента = "Командировка";
	//КонецЕсли;
	
	ВидДокумента = "Премия";
	
	Заголовок = "Рассчитать документы " + ВидДокумента;

КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы



#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ИмяТаблицы



#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура Рассчитать(Команда)
	КоличествоДокументов = ПолучитьКоличествоДокументов(); 
	ИндДокумента = 0;
	СообщенияПользователю = Новый Массив;
	Для каждого Документ из ДокументыДляРасчета цикл
		
		Если не Документ.Рассчитать тогда
			Продолжить;
		КонецЕсли;
		
		Если не Документ.ИсправлениеДоступно тогда
			Сообщить("Документ " +  Документ.Дата+ ", номер " + Документ.Номер + ", относится к закрытому периоду и не будет пересчитан!");
			Продолжить;	
		КонецЕсли;
		
		ИмяФормыДокумента = "Документ." + ВидДокумента + ".Форма.ФормаДокумента";
		Форма = ПолучитьФорму(ИмяФормыДокумента, Новый Структура("Ключ", Документ.Ссылка));
		
		Если не ЗначениеЗаполнено(Форма.Объект.ПорядокВыплаты) тогда
			ОбъектФормы = Форма.Объект;
			Форма.Объект.ПорядокВыплаты = ПолучитьПорядокВыплаты(ОбъектФормы);
			Форма.ПорядокВыплатыПриИзмененииНаСервере();	
			Если Форма.Объект.ПорядокВыплаты = ПредопределенноеЗначение("Перечисление.ХарактерВыплатыЗарплаты.Межрасчет") тогда
				Форма.Объект.ПланируемаяДатаВыплаты = Форма.Объект.Дата;	
			КонецЕсли;
		КонецЕсли;
	
		ДокументЗаписан = ложь;
		
		Если ВидДокумента = "Увольнение" тогда
			РассчитатьУвольнения(Форма);
			ЗаписатьУвольнения(Форма, ДокументЗаписан); 	
		ИначеЕсли  ВидДокумента = "БольничныйЛист" тогда	
			Форма.ВыполнитьПерезаполнениеИРассчитатьНачисленияНаСервере(Истина);
			ЗаписатьДокумент(Форма, ДокументЗаписан);
		ИначеЕсли ВидДокумента = "Премия" тогда
			ПеревыбратьСотрудника(Форма);
			Форма.ПересчитатьДокумент(Форма.Команды.ПересчитатьДокумент);
			ЗаписатьДокумент(Форма, ДокументЗаписан);
		Иначе
			Форма.РассчитатьНачисления(Форма.Команды.Рассчитать);
			ЗаписатьДокумент(Форма, ДокументЗаписан);
		КонецЕсли;
		Форма.Объект.ДокументРассчитан = истина;
		Форма.Объект.Рассчитал 	= ПользователиКлиентСервер.ТекущийПользователь();
		
		
		Если ДокументЗаписан и 
			Форма.Объект.Начисления.Количество() > 0 тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Документ " +  Документ.Дата+ ", номер " + Документ.Номер +  " пересчитан";
			Сообщение.КлючДанных = Документ.Ссылка;
			СообщенияПользователю.Добавить(Сообщение);	
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Документ " +  Документ.Дата+ ", номер " + Документ.Номер +  " пересчитать не удалось!";
			Сообщение.КлючДанных = Документ.Ссылка;
			СообщенияПользователю.Добавить(Сообщение);	
		КонецЕсли;
		ИндДокумента = ИндДокумента + 1;
		Состояние("", (ИндДокумента / КоличествоДокументов) * 100);
	КонецЦикла;
	
	Для каждого Сообщение из СообщенияПользователю цикл
		Сообщение.Сообщить();	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	ДокументыДляРасчета.Очистить();
	ЗаполнитьДокументыДляРасчета();
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	УстановитьЗначениеФлажка(ложь);
КонецПроцедуры


&НаКлиенте
Процедура УстановитьПометки(Команда)
	УстановитьЗначениеФлажка(истина);
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьКоличествоДокументов()
	СтрокиСПометкой = ДокументыДляРасчета.НайтиСтроки(Новый Структура("Рассчитать", истина));	
	Возврат СтрокиСПометкой.Количество();
КонецФункции

&НаКлиенте
Процедура РассчитатьУвольнения(Форма)
	ПараметрыРедактирования = Форма.ПараметрыРедактированияСреднегоЗаработка(КадровыйУчетРасширенныйКлиентСервер.ЭтоСреднечасовойЗаработокВДокументеУвольнение(), Ложь);
	ФормаВводДанныхДляРасчетаСреднего = ПолучитьФорму("ОбщаяФорма.ВводДанныхДляРасчетаСреднегоЗаработкаОбщий", ПараметрыРедактирования, ВладелецФормы);
	ДанныеДляРасчета = ФормаВводДанныхДляРасчетаСреднего.ДанныеДляРасчетаСреднего();
	Форма.ПеренестиДанныеУчетаСреднегоЗаработкаВДокумент(ДанныеДляРасчета);
	
	Форма.РассчитатьНачисления(Форма.Команды.Рассчитать);
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьУвольнения(Форма, ДокументЗаписан)
	Попытка 
		ПараметрыЗаписи = Новый Структура("ПроверкаПередЗаписьюВыполнена, РежимЗаписи", истина, РежимЗаписиДокумента.Проведение);
		КадровыйУчетРасширенныйКлиент.ЗаписьВФормеДокументаУвольнение(Форма, ПараметрыЗаписи, ложь);
		ДокументЗаписан = истина;	
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Форма, ДокументЗаписан)
	Попытка
		Форма.Записать();
		ДокументЗаписан = истина;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументыДляРасчета()
	
	ПроверяемыеДокументы = ПолучитьДокументы();	
	Для каждого Документ из ПроверяемыеДокументы цикл
		РезультатПроверки = ИсправлениеДокументовЗарплатаКадры.ДоступноИсправлениеРасчетногоДокумента(Документ.Ссылка, 
																								Документ.Организация, 
																								Документ.ПериодРегистрации,
																								истина);
																							
		ДокументДляРасчета = ДокументыДляРасчета.Добавить();
		ЗаполнитьЗначенияСвойств(ДокументДляРасчета, Документ);
		ДокументДляРасчета.ИсправлениеДоступно = НЕ (РезультатПроверки.ПроведенаВыплатаЗарплаты и РезультатПроверки.ПроизведеноОтражение);
		Если ДокументДляРасчета.ИсправлениеДоступно 
				и не ДокументДляРасчета.Рассчитан 
				и не ДокументДляРасчета.ФиксРасчет тогда
			ДокументДляРасчета.Рассчитать = истина; 	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДокументы()
	ДокументыМассив = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(Период.ДатаОкончания));
	Если ВидДокумента = "Отпуск" тогда
		ТекстЗапроса = ПолучитьТекстОтпуска();	
	Иначе
		ТекстЗапроса = ПолучитьТекстУвольнения();
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Увольнение", ВидДокумента);
	КонецЕсли;	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Если не Результат.Пустой() тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() цикл
			Документ = Новый Структура("Ссылка, Организация, ПериодРегистрации, Дата, Номер, Рассчитан, ФиксРасчет, Сотрудник, ДатаНачала, ДатаОкончания");
			ЗаполнитьЗначенияСвойств(Документ, Выборка);
			ДокументыМассив.Добавить(Документ);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДокументыМассив;
КонецФункции

Функция ПолучитьТекстУвольнения()
	Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	        |	ДокументНачисление.Ссылка КАК Ссылка,
	        |	ДокументНачисление.Организация КАК Организация,
	        |	ДокументНачисление.ПериодРегистрации КАК ПериодРегистрации,
	        |	ДокументНачисление.Дата КАК Дата,
	        |	ДокументНачисление.Номер КАК Номер,
	        |	ДокументНачисление.ДокументРассчитан КАК Рассчитан,
	        |	ВЫБОР
	        |		КОГДА МАКСИМУМ(ЕСТЬNULL(ТабличнаяЧастьНачисление.ФиксРасчет, ЛОЖЬ)) = ИСТИНА
	        |				ИЛИ МАКСИМУМ(ЕСТЬNULL(ТабличнаяЧастьНачисление.ФиксРасчетВремени, ЛОЖЬ)) = ИСТИНА
	        |			ТОГДА ИСТИНА
	        |		ИНАЧЕ ЛОЖЬ
	        |	КОНЕЦ КАК ФиксРасчет
	        |ИЗ
	        |	Документ.Увольнение КАК ДокументНачисление
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Увольнение.Начисления КАК ТабличнаяЧастьНачисление
	        |		ПО (ТабличнаяЧастьНачисление.Ссылка = ДокументНачисление.Ссылка)
	        |ГДЕ
	        |	ДокументНачисление.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ДокументНачисление.Ссылка,
	        |	ДокументНачисление.Организация,
	        |	ДокументНачисление.ПериодРегистрации,
	        |	ДокументНачисление.Дата,
	        |	ДокументНачисление.Номер,
	        |	ДокументНачисление.ДокументРассчитан
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Дата";	
	
	Возврат Текст;
КонецФункции

Функция ПолучитьТекстОтпуска()
	Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	        |	ДокументНачисление.Ссылка,
	        |	ДокументНачисление.Организация,
	        |	ДокументНачисление.ПериодРегистрации,
	        |	ДокументНачисление.Дата КАК Дата,
	        |	ДокументНачисление.Номер,
	        |	ДокументНачисление.ДокументРассчитан КАК Рассчитан,
	        |	ВЫБОР
	        |		КОГДА МАКСИМУМ(ЕСТЬNULL(ТабличнаяЧастьНачисление.ФиксРасчет, ЛОЖЬ)) = ИСТИНА
	        |				ИЛИ МАКСИМУМ(ЕСТЬNULL(ТабличнаяЧастьНачисление.ФиксРасчетВремени, ЛОЖЬ)) = ИСТИНА
	        |			ТОГДА ИСТИНА
	        |		ИНАЧЕ ЛОЖЬ
	        |	КОНЕЦ КАК ФиксРасчет,
	        |	ДокументНачисление.Сотрудник,
	        |	ДокументНачисление.ДатаНачалаОсновногоОтпуска КАК ДатаНачала,
	        |	ДокументНачисление.ДатаОкончанияОсновногоОтпуска КАК ДатаОкончания
	        |ИЗ
	        |	Документ.Отпуск КАК ДокументНачисление
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Отпуск.Начисления КАК ТабличнаяЧастьНачисление
	        |		ПО (ТабличнаяЧастьНачисление.Ссылка = ДокументНачисление.Ссылка)
	        |ГДЕ
	        |	ДокументНачисление.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ДокументНачисление.Ссылка,
	        |	ДокументНачисление.Организация,
	        |	ДокументНачисление.ПериодРегистрации,
	        |	ДокументНачисление.Дата,
	        |	ДокументНачисление.Номер,
	        |	ДокументНачисление.ДокументРассчитан,
	        |	ДокументНачисление.Сотрудник,
	        |	ДокументНачисление.ДатаНачалаОсновногоОтпуска,
	        |	ДокументНачисление.ДатаОкончанияОсновногоОтпуска
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	Дата";	
	Возврат Текст;
КонецФункции

&НаКлиенте
Процедура УстановитьЗначениеФлажка(ЗначениеФлажка)
	Для Каждого СтрокаТаблицы Из ДокументыДляРасчета Цикл
		СтрокаТаблицы.Рассчитать = ЗначениеФлажка;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПеревыбратьСотрудника(Форма)
	Для каждого Строка из Форма.Объект.Начисления цикл
		Если Не ЗначениеЗаполнено(Строка.ПериодДействия) Тогда
			Строка.ПериодДействия = Форма.Объект.ПериодРегистрации;
			Строка.ДатаНачала = НачалоМесяца(Форма.Объект.ПериодРегистрации);
			Строка.ДатаОкончания = КонецМесяца(Форма.Объект.ПериодРегистрации);
		КонецЕсли;
		Форма.ОбработатьИзменениеСотрудника(Строка.ПолучитьИдентификатор(), Строка.Сотрудник);		
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьПорядокВыплаты(ОбъектФормы)
	
	Если ВидДокумента = "Премия"  тогда
		КодДоходаНДФЛ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектФормы.Начисление, "КодДоходаНДФЛ");
		Если КодДоходаНДФЛ = Справочники.ВидыДоходовНДФЛ.Код2002 тогда 
			Возврат Перечисления.ХарактерВыплатыЗарплаты.Межрасчет;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Перечисления.ХарактерВыплатыЗарплаты.Зарплата;

КонецФункции

#КонецОбласти



