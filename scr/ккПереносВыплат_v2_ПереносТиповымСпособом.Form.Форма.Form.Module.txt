
#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ХарактерыВыплаты = Новый Массив;
	ХарактерыВыплаты.Добавить("Зарплата");
	ХарактерыВыплаты.Добавить("ПлановыйАванс");
	ХарактерыВыплаты.Добавить("АвансЗаПервуюПоловинуМесяца");
	ХарактерыВыплаты.Добавить("ПоБольничнымЛистам");
	ХарактерыВыплаты.Добавить("ПоБеременностиИРодам");
	ХарактерыВыплаты.Добавить("Отпускные");
	ХарактерыВыплаты.Добавить("Командировочные");
	ХарактерыВыплаты.Добавить("Премии");
	ХарактерыВыплаты.Добавить("РасчетПриУвольнении");
	ХарактерыВыплаты.Добавить("Дивиденды");
	ХарактерыВыплаты.Добавить("ПрочиеРазовыеНачисления");
    ХарактерыВыплаты.Добавить("ПособияФСС");
	ХарактерыВыплаты.Добавить("ВозвратНДФЛ");
	ХарактерыВыплаты.Добавить("Задолженность");


	Элементы.ХарактерВыплаты.СписокВыбора.ЗагрузитьЗначения(ХарактерыВыплаты);	
КонецПроцедуры



#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы



#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ИмяТаблицы



#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура УстановитьПометкуСписокОбъектовДляЗагрузки(Команда)
	
	УстановитьПометкуСтрокТаблицы(Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды СнятьПометкуСписокОбъектовДляЗагрузки.
//
Процедура СнятьПометкуСписокОбъектовДляЗагрузки(Команда)
	
	УстановитьПометкуСтрокТаблицы(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	Для каждого Строка Из СписокОбъектовДляЗагрузки цикл
		Если Строка.Загружать тогда
			 ЗагрузитьДокумент(Строка);	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанные(Команда)
	СписокОбъектовДляЗагрузки.Очистить();
	ПрочитатьДанныеНаСервере();
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Процедура ЗагрузитьДокумент(ДанныеИсточника)
	ДанныеДокумента = ПолучитьДанныеДляЗаполненияДокумента(ДанныеИсточника.УникальныйИдентификаторИсточника);
	Если ДанныеИсточника.Касса тогда
		ФормаДокумента = ПолучитьФорму("Документ.ВедомостьНаВыплатуЗарплатыВКассу.Форма.ФормаДокумента", Новый Структура("Ключ", ДанныеДокумента.СсылкаВ31));
	Иначе
		ФормаДокумента = ПолучитьФорму("Документ.ВедомостьНаВыплатуЗарплатыВБанк.Форма.ФормаДокумента", Новый Структура("Ключ", ДанныеДокумента.СсылкаВ31));
		Если ЗаполнятьЗарплатныйПроект тогда
			ФормаДокумента.Объект.ЗарплатныйПроект = НайтиЗарплатныйПроект(ДанныеДокумента.Банк); 	
		Иначе	
			ФормаДокумента.Объект.ЗарплатныйПроект = ПредопределенноеЗначение("Справочник.ЗарплатныеПроекты.ПустаяСсылка");	
		КонецЕсли;		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ФормаДокумента.Объект, ДанныеДокумента);
	ФормаДокумента.Объект.Состав.Очистить();
	ФормаДокумента.Объект.НДФЛ.Очистить();
	ФормаДокумента.Объект.Зарплата.Очистить();
	ФормаДокумента.Объект.ФизическиеЛица.Очистить();
	Если ДанныеИсточника.Касса тогда
		ФормаДокумента.Объект.Касса = НайтиКассуПоПодразделеню(ФормаДокумента.Объект.Подразделение);	
		Если ЗначениеЗаполнено(ДанныеДокумента.ДатаВыплаты) тогда
			//ФормаДокумента.Объект.Дата  = ДанныеДокумента.ДатаВыплаты;
		КонецЕсли;
	КонецЕсли;
	ФормаДокумента.Объект.Подразделение = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
	//ЗарплатаКадрыКлиент.ВводМесяцаПриИзменении(ФормаДокумента, "Объект.ПериодРегистрации", "ПериодРегистрацииСтрокой", ложь);
	ФормаДокумента.СпособВыплатыПриИзмененииНаСервере();
	
	ФизЛица = Новый Массив;
	Для каждого Элемент из ДанныеДокумента.Сотрудники цикл
		ФизЛица.Добавить(Элемент.ФизическоеЛицо);	
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ФормаДокумента.ВидДокументаОснования) тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВидДокумента", ФормаДокумента.ВидДокументаОснования);
		ПараметрыФормы.Вставить("Организация", ФормаДокумента.Объект.Организация);
		ПараметрыФормы.Вставить("Подразделение", ФормаДокумента.Объект.Подразделение);
		ПараметрыФормы.Вставить("ПериодВзаиморасчетов", ФормаДокумента.Объект.ПериодРегистрации);

		ФормаЗаполненияОснования = ПолучитьФорму("ОбщаяФорма.ВыборДокументовОснованийВедомостейНаВыплатуЗарплаты", ПараметрыФормы);			  			
		ЗаполнитьСписокДокументов(ФормаЗаполненияОснования.ВидДокумента, ФормаЗаполненияОснования.Организация, ФормаЗаполненияОснования.ПериодВзаиморасчетов, ФормаЗаполненияОснования.СписокДокументов, ФизЛица);
		ВзаиморасчетыССотрудникамиКлиентРасширенный.ВедомостьОбработкаОповещения(ФормаДокумента, "ВыборДокументовОснованийВедомостейНаВыплатуЗарплаты", ФормаЗаполненияОснования.СписокДокументов, ФормаЗаполненияОснования);	
		ДанныеПоНДФЛ = ПолучитьДанныеПоНДФЛ(ФормаЗаполненияОснования.СписокДокументов);
	КонецЕсли;
	
	
	
	ФормаДокумента.СоставОбработкаВыбораНаСервере(ФизЛица, истина);
	
	ИдентификаторыСтрокОбновитьНДФЛ = Новый Массив;

	СтрокиЗарплатаКУдалению = Новый Массив;
	Для каждого Элемент из ДанныеДокумента.Сотрудники цикл
		НайденныеСтроки = ФормаДокумента.Объект.Состав.НайтиСтроки(Новый Структура("ФизическоеЛицо", Элемент.ФизическоеЛицо));
		Если НайденныеСтроки.Количество() = 0 тогда
			Сообщить(Элемент.ФизическоеЛицо);
		КонецЕсли;
		Для каждого Строка Из НайденныеСтроки цикл
			Если Строка.КВыплате <> Элемент.КВыплате тогда
				Строка.КВыплате = Элемент.КВыплате;
				ФормаДокумента.Элементы.Состав.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
				ФормаДокумента.СоставКВыплатеПриИзмененииНаСервере();
				ИдентификаторыСтрокОбновитьНДФЛ.Добавить(Строка.ПолучитьИдентификатор());
				
			КонецЕсли;			
		КонецЦикла;
	КонецЦикла;
	
	Если ИдентификаторыСтрокОбновитьНДФЛ.Количество() > 0
		и ДанныеДокумента.СпособВыплаты.ХарактерВыплаты <> ПредопределенноеЗначение("Перечисление.ХарактерВыплатыЗарплаты.Аванс") тогда
		ФормаДокумента.ОбновитьНДФЛНаСервере(ИдентификаторыСтрокОбновитьНДФЛ);
	КонецЕсли;
	
	ФормаДокумента.Объект.ПеречислениеНДФЛВыполнено = ложь;
	
	Попытка 
		ФормаДокумента.Записать();
		ЗаписатьВРегистрСоответстви(ФормаДокумента.Объект.Ссылка, ДанныеИсточника.УникальныйИдентификаторИсточника);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	ПровестиДокумент(ФормаДокумента.Объект.Ссылка);
		
КонецПроцедуры


&НаСервере
// Устанавливает значение пометки для всех строк таблицы.
//
// Параметры:
//  ЗначениеПометки	- Булево.
//
Процедура УстановитьПометкуСтрокТаблицы(ЗначениеПометки)
		
	Для Каждого СтрокаСписка Из СписокОбъектовДляЗагрузки Цикл
			
		СтрокаСписка.Загружать = ЗначениеПометки;
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьДанныеПоНДФЛ(СписокДокументов)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", СписокДокументов); 
	Запрос.Текст = "ВЫБРАТЬ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо,
	|	СУММА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Сумма) КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор В(&Регистратор)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизическоеЛицо";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ПрочитатьДанныеНаСервере()
	Узел = ПолучитьУзел25();
	ВнешнееСоединениеСтруктура =  ОбменДаннымиСервер.УстановитьВнешнееСоединениеСБазой(
        РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспорта(
            Узел, Перечисления.ВидыТранспортаСообщенийОбмена.COM));
			
	ВнешнееСоединение = ВнешнееСоединениеСтруктура.Соединение;


	Запрос = ВнешнееСоединение.NewObject("Запрос");
	Запрос.УстановитьПараметр("НачалоПериода", Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("ОтборПоДатеВыплаты", ложь);
	Если ЗначениеЗаполнено(ПериодВыплаты) тогда
		Запрос.УстановитьПараметр("ОтборПоДатеВыплаты", истина);		
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаВыплатыС",ПериодВыплаты.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаВыплатыПо",ПериодВыплаты.ДатаОкончания);
	Запрос.УстановитьПараметр("НеАванс", НеАванс);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗарплатаКВыплатеОрганизаций.Ссылка,
	|	ЗарплатаКВыплатеОрганизаций.ВерсияДанных,
	|	ЗарплатаКВыплатеОрганизаций.ПометкаУдаления,
	|	ЗарплатаКВыплатеОрганизаций.Номер,
	|	ЗарплатаКВыплатеОрганизаций.Дата,
	|	ЗарплатаКВыплатеОрганизаций.Проведен,
	|	ЗарплатаКВыплатеОрганизаций.Организация,
	|	ЗарплатаКВыплатеОрганизаций.ПериодРегистрации,
	|	ЗарплатаКВыплатеОрганизаций.СпособВыплаты,
	|	ЗарплатаКВыплатеОрганизаций.Ответственный,
	|	ЗарплатаКВыплатеОрганизаций.Комментарий,
	|	ЗарплатаКВыплатеОрганизаций.ДнейНеВыплаты,
	|	ЗарплатаКВыплатеОрганизаций.КраткийСоставДокумента,
	|	ЗарплатаКВыплатеОрганизаций.ХарактерВыплаты,
	|	ЗарплатаКВыплатеОрганизаций.ПодразделениеОрганизации,
	|	ЗарплатаКВыплатеОрганизаций.ДокументОснование,
	|	ЗарплатаКВыплатеОрганизаций.ДатаНачала,
	|	ЗарплатаКВыплатеОрганизаций.ДатаОкончания,
	|	ЗарплатаКВыплатеОрганизаций.Банк,
	|	ЗарплатаКВыплатеОрганизаций.ПроцентВыплаты,
	|	ЗарплатаКВыплатеОрганизаций.ПредварительныйУчетУдержаний,
	|	ЗарплатаКВыплатеОрганизаций.Округление,
	|	ЗарплатаКВыплатеОрганизаций.СуммаДокумента,
	|	ЗарплатаКВыплатеОрганизаций.ДанныеПрошлойВерсии,
	|	ЗарплатаКВыплатеОрганизаций.Представление,
	|	ЗарплатаКВыплатеОрганизаций.МоментВремени
	|ПОМЕСТИТЬ втДанные
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций КАК ЗарплатаКВыплатеОрганизаций
	|ГДЕ
	|	ЗарплатаКВыплатеОрганизаций.ПериодРегистрации МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ЗарплатаКВыплатеОрганизаций.Проведен
	|   И ВЫБОР
	|			КОГДА &НеАванс
	|				ТОГДА НЕ ЗарплатаКВыплатеОрганизаций.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.ПлановыйАванс)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ОтборПоХарактеруВыплаты
	|				ТОГДА ЗарплатаКВыплатеОрганизаций.ХарактерВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.ПлановыйАванс)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Ссылка,
	|	МАКСИМУМ(СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор.Дата) КАК ДатаВыплаты
	|ПОМЕСТИТЬ втДатыВыплат
	|ИЗ
	|	втДанные КАК втДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
	|		ПО втДанные.Ссылка = СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость	
	|СГРУППИРОВАТЬ ПО
	|	втДанные.Ссылка
	|;	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанные.Ссылка КАК Источник,
	|	втДанные.ВерсияДанных,
	|	втДанные.ПометкаУдаления,
	|	втДанные.Номер,
	|	втДанные.Дата,
	|	втДанные.Проведен,
	|	втДанные.Организация,
	|	втДанные.ПериодРегистрации,
	|	ПРЕДСТАВЛЕНИЕ(втДанные.СпособВыплаты) КАК СпособВыплаты,
	|	втДанные.Ответственный,
	|	втДанные.Ответственный.ФизЛицо КАК ФизЛицоОтветственного,
	|	втДанные.Комментарий,
	|	втДанные.ДнейНеВыплаты,
	|	втДанные.КраткийСоставДокумента,
	|	ПРЕДСТАВЛЕНИЕ(втДанные.ХарактерВыплаты) КАК ХарактерВыплаты,
	|	втДанные.ПодразделениеОрганизации,
	|	ЕСТЬNULL(втДанные.ПодразделениеОрганизации.Наименование, """") КАК ИмяПодразделения,
	|	втДанные.ДокументОснование,
	|	втДанные.ДатаНачала,
	|	втДанные.ДатаОкончания,
	|	ЕСТЬNULL(втДанные.Банк.Наименование, """") КАК Банк,
	|	втДанные.ПроцентВыплаты,
	|	втДанные.ПредварительныйУчетУдержаний,
	|	ПРЕДСТАВЛЕНИЕ(втДанные.Округление) КАК Округление,
	|	втДанные.СуммаДокумента КАК СуммаПоДокументу,
	|	ВЫБОР
	|		КОГДА втДанные.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Касса,
	|	ЕСТЬNULL(втДатыВыплат.ДатаВыплаты, ДАТАВРЕМЯ(1,1,1)) КАК ДатаВыплаты
	|ИЗ
	|	втДанные КАК втДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДатыВыплат КАК втДатыВыплат
	|		ПО втДанные.Ссылка = втДатыВыплат.Ссылка
	|ГДЕ 
	|	ВЫБОР 
	|		КОГДА &ОтборПоДатеВыплаты ТОГДА
	|			ЕСТЬNULL(втДатыВыплат.ДатаВыплаты, ДАТАВРЕМЯ(1,1,1)) МЕЖДУ &ДатаВыплатыС И &ДатаВыплатыПо
	|		ИНАЧЕ 
	|			ИСТИНА
	|	КОНЕЦ
	|УПОРЯДОЧИТЬ ПО
	|	ЕСТЬNULL(втДатыВыплат.ДатаВыплаты, ДАТАВРЕМЯ(1,1,1)),
	|	втДанные.ПериодРегистрации
	|;	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка КАК Источник,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.НомерСтроки,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Сумма,
	|	ПРЕДСТАВЛЕНИЕ(ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты) КАК ВыплаченностьЗарплаты,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Авторасчет,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Начислено,
	|	ЗарплатаКВыплатеОрганизацийЗарплата.Удержано
	|ИЗ
	|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанные КАК втДанные
	|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = втДанные.Ссылка";	
	Если ЗначениеЗаполнено(ХарактерВыплаты) тогда
        Запрос.УстановитьПараметр("ОтборПоХарактеруВыплаты", истина);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.ПлановыйАванс)", "ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты." + ХарактерВыплаты + ")");	
	Иначе
		Запрос.УстановитьПараметр("ОтборПоХарактеруВыплаты", ложь);
	КонецЕсли;
	МассивРезультатов = Запрос.ВыполнитьПакет();
	//Если Результат.Пустой() тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	ВнешниеДанныеШапки 			= МассивРезультатов.Get(2).Выгрузить();		
	ВнешниеДанныеТабличнойЧасти = МассивРезультатов.Get(3).Выгрузить();
	ДанныеШапки = ПреобразоватьВнешнююТаблицуВТаблицу(ВнешнееСоединение, ВнешниеДанныеШапки);
	ДанныеТабличнойЧасти = ПреобразоватьВнешнююТаблицуВТаблицу(ВнешнееСоединение, ВнешниеДанныеТабличнойЧасти);
	ДанныеТабличнойЧасти.Колонки.Добавить("УникальныйИдентификаторИсточника", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
	Для каждого Строка из ДанныеТабличнойЧасти цикл
		Строка.УникальныйИдентификаторИсточника = Строка.Источник.УникальныйИдентификатор;	
	КонецЦикла;
	
	ДанныеШапки.Колонки.Добавить("СтрокиТабличнойЧасти", Новый ОписаниеТипов("Массив"));
	ДанныеШапки.Колонки.Добавить("УникальныйИдентификаторИсточника", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100)));
	ДанныеШапки.Колонки.Добавить("СсылкаВ31");
	Для каждого Строка из ДанныеШапки цикл
		Строка.УникальныйИдентификаторИсточника = Строка.Источник.УникальныйИдентификатор;
		Строка.СтрокиТабличнойЧасти = ДанныеТабличнойЧасти.НайтиСтроки(Новый Структура("УникальныйИдентификаторИсточника",Строка.УникальныйИдентификаторИсточника));		
		Строка.СсылкаВ31 = НайтиСсылкуВ31(Узел, Строка.УникальныйИдентификаторИсточника);
	КонецЦикла;
	
	Для каждого Строка из ДанныеШапки цикл
		НоваяСтрока = СписокОбъектовДляЗагрузки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Подразделение = Строка.ИмяПодразделения;
		НоваяСтрока.Загружать = истина;
		Если ЗначениеЗаполнено(НоваяСтрока.СсылкаВ31) тогда
			НоваяСтрока.СуммаВЗ1 = НоваяСтрока.СсылкаВ31.СуммаПоДокументу;
		КонецЕсли;
		Если НоваяСтрока.СуммаВЗ1 = НоваяСтрока.СуммаПоДокументу тогда
			НоваяСтрока.СуммыСовпали = Истина;
		Иначе
			НоваяСтрока.СуммыСовпали = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	АдресОбъектыДляЗагрузки = ПоместитьВоВременноеХранилище(ДанныеШапки, ЭтаФорма.УникальныйИдентификатор); 
КонецПроцедуры


Функция ПолучитьДанныеДляЗаполненияДокумента(УникальныйИдентификаторИсточника)
	ДанныеДляЗаполненияДокумента = Новый Структура("Дата, ДатаВыплаты, ПериодРегистрации, Ответственный, Комментарий, КраткийСоставДокумента, Подразделение, ПериодРегистрации, СуммаПоДокументу, СпособВыплаты, СсылкаВ31, Банк, Сотрудники");
	Сотрудники = Новый Массив;
	ВнешниеДанные = ПолучитьИзВременногоХранилища(АдресОбъектыДляЗагрузки);
	ДанныеИсточника  = ВнешниеДанные.Найти(УникальныйИдентификаторИсточника, "УникальныйИдентификаторИсточника");
	ЗаполнитьЗначенияСвойств(ДанныеДляЗаполненияДокумента, ДанныеИсточника);
	
	
	УИОрганизация    = Новый УникальныйИдентификатор(ДанныеИсточника.Организация.УникальныйИдентификатор);
	УИПодразделение  = Новый УникальныйИдентификатор(ДанныеИсточника.ПодразделениеОрганизации.УникальныйИдентификатор);
	
	
	//ДанныеДляЗаполненияДокумента.Ответственный = Справочники.Пользователи.ПолучитьСсылку(УИОтветственный);
	Если ДанныеИсточника.ФизЛицоОтветственного.Свойство("УникальныйИдентификатор") тогда
		УИОтветственный  = Новый УникальныйИдентификатор(ДанныеИсточника.ФизЛицоОтветственного.УникальныйИдентификатор);
		ФизЛицоОтветственного = Справочники.ФизическиеЛица.ПолучитьСсылку(УИОтветственный);
		ДанныеДляЗаполненияДокумента.Ответственный = Справочники.Пользователи.НайтиПоРеквизиту("ФизическоеЛицо", ФизЛицоОтветственного);	
	Иначе
		ДанныеДляЗаполненияДокумента.Ответственный = Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;	
	//ДанныеДляЗаполненияДокумента.Организация  = Справочники.Организации.ПолучитьСсылку(УИОрганизация);
	ДанныеДляЗаполненияДокумента.Подразделение = Справочники.ПодразделенияОрганизаций.ПолучитьСсылку(УИПодразделение);
	Если Не ЗначениеЗаполнено(ДанныеДляЗаполненияДокумента.Подразделение.Код)
		и ЗначениеЗаполнено(ДанныеИсточника.ПодразделениеОрганизации.Объект.Code) тогда
		ДанныеДляЗаполненияДокумента.Подразделение = Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию(ДанныеИсточника.ИмяПодразделения);	
	КонецЕсли;	
	ДанныеДляЗаполненияДокумента.СпособВыплаты = ОпределитьСпособВыплаты(ДанныеИсточника.ХарактерВыплаты);	
	
	Для каждого Строка из ДанныеИсточника.СтрокиТабличнойЧасти цикл
		ДанныеТЧ = Новый Структура("ФизическоеЛицо, КВыплате, КомпенсацияЗаЗадержкуЗарплаты");
		ЗаполнитьЗначенияСвойств(ДанныеТЧ, Строка);
		УИФизическоеЛицо = Новый УникальныйИдентификатор(Строка.Физлицо.УникальныйИдентификатор);
		ФизЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку(УИФизическоеЛицо);
		Если не ЗначениеЗаполнено(ФизЛицо.Код) тогда
			//ФизЛицо = Справочники.ФизическиеЛица.НайтиПоРеквизиту("ИНН", Строка.ФизЛицо.Объект.ИНН);	
			ФизЛицо = НайтиФизЛицоПоИННиНаименованию(Строка.ФизЛицо.Объект.ИНН, Строка.ФизЛицо.Объект.Description);	
		КонецЕсли;
		ДанныеТЧ.ФизическоеЛицо = ФизЛицо;
		ДанныеТЧ.КВыплате = Окр(Строка.Сумма, 2);
		Сотрудники.Добавить(ДанныеТЧ);
	КонецЦикла;
	
	ДанныеДляЗаполненияДокумента.Сотрудники = Сотрудники;
	
	Возврат ДанныеДляЗаполненияДокумента;
КонецФункции

Функция НайтиФизЛицоПоИННиНаименованию(ИНН, Наименование)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.Текст = "ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.ИНН = &ИНН
	|	И ФизическиеЛица.Наименование = &Наименование";
	Результат = Запрос.Выполнить();
	Если не Результат.Пустой() тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
КонецФункции

Функция ОпределитьСпособВыплаты(ХарактерВыплатыИсточник)
	Если ХарактерВыплатыИсточник = "Плановый аванс"
		или ХарактерВыплатыИсточник = "Аванс по расчету за первую половину месяца" тогда
		СпособВыплаты = Справочники.СпособыВыплатыЗарплаты.НайтиПоНаименованию("Аванс");
	ИначеЕсли ХарактерВыплатыИсточник = "Пособия по больничным листам" тогда
		СпособВыплаты = Справочники.СпособыВыплатыЗарплаты.НайтиПоНаименованию("Больничные листы");
	ИначеЕсли ХарактерВыплатыИсточник = "Единовременные пособия за счет ФСС" тогда
		СпособВыплаты = Справочники.СпособыВыплатыЗарплаты.НайтиПоНаименованию("Единовременные пособия за счет ФСС");
	ИначеЕсли ХарактерВыплатыИсточник = "Зарплата" тогда
		СпособВыплаты = Справочники.СпособыВыплатыЗарплаты.Зарплата;
	ИначеЕсли ХарактерВыплатыИсточник = "Отпускные" тогда
		СпособВыплаты = Справочники.СпособыВыплатыЗарплаты.НайтиПоНаименованию("Отпуска");
	ИначеЕсли ХарактерВыплатыИсточник = "Отпуск по беременности и родам" тогда
		СпособВыплаты = Справочники.СпособыВыплатыЗарплаты.НайтиПоНаименованию("Больничные листы");
	ИначеЕсли ХарактерВыплатыИсточник = "Премии" тогда
		СпособВыплаты = Справочники.СпособыВыплатыЗарплаты.НайтиПоНаименованию("Премии");
	ИначеЕсли  ХарактерВыплатыИсточник = "Прочие разовые начисления" тогда
		СпособВыплаты = Справочники.СпособыВыплатыЗарплаты.НайтиПоНаименованию("Разовые начисления");
	Иначе
		СпособВыплаты = Справочники.СпособыВыплатыЗарплаты.НайтиПоНаименованию(ХарактерВыплатыИсточник);
	КонецЕсли;
	
	Возврат СпособВыплаты;
КонецФункции

Процедура ЗаполнитьСписокДокументов(ВидДокумента, Организация, ПериодВзаиморасчетов, СписокДокументов, ФизическиеЛица)
	
	ШаблонПредставления = НСтр("ru = '%1 от %2 - %3'");
	
	СписокДокументов.Очистить();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодВзаиморасчетов", ПериодВзаиморасчетов);
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	
	ИмяВидаДокумента = ОбщегоНазначения.ИмяЗначенияПеречисления(ВидДокумента);
	ИменаВозможныхДокументов = Новый Массив;
	ИменаВозможныхДокументов.Добавить(ИмяВидаДокумента);
	ИменаВозможныхДокументов.Добавить(ИмяВидаДокумента + "Списком");
	
	Для Каждого ИмяВозможногоДокумента Из ИменаВозможныхДокументов Цикл
		МетаданныеДокумента = Метаданные.Документы.Найти(ИмяВозможногоДокумента);
		Если МетаданныеДокумента <> Неопределено Тогда
			
			ЕстьКраткийСостав = МетаданныеДокумента.Реквизиты.Найти("КраткийСоставДокумента") <> Неопределено;
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Документ.Ссылка КАК Ссылка,
			|	Документ.Номер КАК Номер,
			|	Документ.Дата КАК Дата,
			|	МИНИМУМ(&ДокументКраткийСостав) КАК Работники
			|ИЗ
			|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокВыплатыДокументов КАК ПорядокВыплатыДокументов
			|		ПО (ПорядокВыплатыДокументов.Регистратор = ЗарплатаКВыплате.Регистратор)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #Документ КАК Документ
			|		ПО (Документ.Ссылка = ЗарплатаКВыплате.Регистратор)
			|ГДЕ
			|	ПорядокВыплатыДокументов.ПорядокВыплаты = ЗНАЧЕНИЕ(Перечисление.ХарактерВыплатыЗарплаты.Межрасчет)
			|	И ЗарплатаКВыплате.Организация = &Организация
			|	И ЗарплатаКВыплате.ПериодВзаиморасчетов = &ПериодВзаиморасчетов
			|	И ЗарплатаКВыплате.ФизическоеЛицо В(&ФизическиеЛица)
			|
			|СГРУППИРОВАТЬ ПО
			|	Документ.Ссылка,
			|	Документ.Номер,
			|	Документ.Дата
			|
			|УПОРЯДОЧИТЬ ПО
			|	НАЧАЛОПЕРИОДА(Документ.Дата, ГОД),
			|	Документ.Номер,
			|	Работники";
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Документ", МетаданныеДокумента.ПолноеИмя());
			Если ЕстьКраткийСостав Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДокументКраткийСостав", "Документ.КраткийСоставДокумента");
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДокументКраткийСостав", "ЗарплатаКВыплате.ФизическоеЛицо");
			КонецЕсли;	
			
			РезультатЗапросаДокументов = Запрос.Выполнить();
			Если РезультатЗапросаДокументов.Пустой() Тогда
				Продолжить
			КонецЕсли;
			
			ВыборкаДокументов = РезультатЗапросаДокументов.Выбрать();
			
			Если Не ЕстьКраткийСостав Тогда
				ДатаАктуальности = '00010101';
				ФизЛица = Новый Массив;
				Пока ВыборкаДокументов.Следующий() Цикл
					ДатаАктуальности = Макс(ДатаАктуальности, ВыборкаДокументов.Дата);
					ФизЛица.Добавить(ВыборкаДокументов.Работники);
				КонецЦикла;				
				ИменаФизлиц = ЗарплатаКадры.СоответствиеФИОФизЛицСсылкам(ДатаАктуальности, ФизЛица);
			КонецЕсли;	
			
			ВыборкаДокументов.Сбросить();
			Пока ВыборкаДокументов.Следующий() Цикл
				
				Если ЕстьКраткийСостав Тогда
					Работники = ВыборкаДокументов.Работники
				Иначе
					Работники = ФизическиеЛицаЗарплатаКадрыКлиентСервер.ФамилияИнициалы(ИменаФизлиц[ВыборкаДокументов.Работники])
				КонецЕсли;	
				
				Представление = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонПредставления, 
						ВыборкаДокументов.Номер, 
						Формат(ВыборкаДокументов.Дата, "ДЛФ=Д"),
						Работники);
				
				ЭлементСпискаДокументов = СписокДокументов.Добавить(ВыборкаДокументов.Ссылка, Представление);
				
			КонецЦикла	
			
		КонецЕсли;			
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура УдалитьИзНДФЛ(Форма, ИдентификаторыСтрок) Экспорт
	
	
	Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		
		УдаляемыеСтроки = Форма.Объект.НДФЛ.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки));
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			Форма.Объект.НДФЛ.Удалить(УдаляемаяСтрока);
		КонецЦикла;	
		
	КонецЦикла
	
КонецПроцедуры

Процедура ЗаписатьВРегистрСоответстви(СсылкаНаДокументВ31, УникальныйИдентификаторВ25)
	ВходящиеПараметры = Новый Структура("УзелИнформационнойБазы, УникальныйИдентификаторИсточника, УникальныйИдентификаторПриемника, ТипПриемника, ТипИсточника");
	ВходящиеПараметры.УзелИнформационнойБазы = ПолучитьУзел25();
	ВходящиеПараметры.УникальныйИдентификаторИсточника = СсылкаНаДокументВ31;
	ВходящиеПараметры.УникальныйИдентификаторПриемника = УникальныйИдентификаторВ25;
	ВходящиеПараметры.ТипПриемника = "ДокументСсылка.ЗарплатаКВыплатеОрганизаций";
	ВходящиеПараметры.ТипИсточника = "ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк";
	
	ДобавитьЗаписьВРегистрСоответствий(ВходящиеПараметры);
КонецПроцедуры

Процедура ДобавитьЗаписьВРегистрСоответствий(ВходящиеПараметры)
	НаборЗаписей = РегистрыСведений.СоответствияОбъектовИнформационныхБаз.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УзелИнформационнойБазы.Установить(ВходящиеПараметры.УзелИнформационнойБазы);
	НаборЗаписей.Отбор.УникальныйИдентификаторИсточника.Установить(ВходящиеПараметры.УникальныйИдентификаторИсточника);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	запись = НаборЗаписей.Добавить();
	
	ЗаполнитьЗначенияСвойств(запись,ВходящиеПараметры);
	НаборЗаписей.Записать(Истина);

КонецПроцедуры

Функция НайтиСсылкуВ31(Узел, УникальныйИдентификатор25)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", Узел);
	Запрос.УстановитьПараметр("ТипПриемника", "ДокументСсылка.ЗарплатаКВыплатеОрганизаций");
	Запрос.УстановитьПараметр("УникальныйИдентификаторПриемника", УникальныйИдентификатор25); 
	Запрос.Текст = "ВЫБРАТЬ
	|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК СсылкаВ31
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
	|ГДЕ
	|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника = &УникальныйИдентификаторПриемника
	|	И СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы = &УзелИнформационнойБазы
	|	И СоответствияОбъектовИнформационныхБаз.ТипПриемника = &ТипПриемника";
	Результат = Запрос.Выполнить();
	Если не Результат.Пустой() тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.СсылкаВ31;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьУзел25()
	Возврат ПланыОбмена.ОбменСообщениями.НайтиПоНаименованию("ЗУП25"); 	
КонецФункции

Функция НайтиКассуПоПодразделеню(ИмяПодразделения)
	Возврат Справочники.Кассы.НайтиПоНаименованию(ИмяПодразделения);	
КонецФункции

Процедура ПровестиДокумент(Документ)
	ДокументОбъект = Документ.ПолучитьОбъект();
	Попытка 
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция НайтиЗарплатныйПроект(БанкНаименование)
	
	ЗарплатныйПроект = Справочники.ЗарплатныеПроекты.НайтиПоНаименованию("Сбербанк России ОАО г. Москва");
	
	Возврат ЗарплатныйПроект;
КонецФункции

Функция ПреобразоватьВнешнююТаблицуВТаблицу(ВнешнееСоединение, ВнешняяТаблица) Экспорт
	ТаблицаВозврата = Новый ТаблицаЗначений;
	Для каждого ВнешняяКолонка из ВнешняяТаблица.Columns цикл
		МассивТипов = Новый Массив;
		Если ВнешняяТаблица.Количество() = 0 тогда
			ТипКолонки = Тип("Строка"); 	
		Иначе
			ТипКолонки = ТипЗнч(ВнешняяТаблица.Get(0)[ВнешняяКолонка.Name]); 
			Если ТипКолонки = Тип("COMОбъект") тогда
				ТипКолонки = Тип("Структура");
			КонецЕсли;
			МассивТипов.Добавить(ТипКолонки);
		КонецЕсли;
		ТаблицаВозврата.Колонки.Добавить(ВнешняяКолонка.Name, Новый ОписаниеТипов(МассивТипов));	
	КонецЦикла;
	Для каждого ВнешняяСтрока из ВнешняяТаблица цикл
		НоваяСтрока = ТаблицаВозврата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВнешняяСтрока);
		Для каждого Колонка из ТаблицаВозврата.Колонки цикл
			ВнешнееЗначение = ВнешняяСтрока[Колонка.Имя];
			Если ТипЗнч(ВнешнееЗначение) = Тип("COMОбъект") Тогда
				ОбъектCom = Новый Структура("Code, Description, КодЗУП, ИНН, Периодичность, Метаданные");
				ЗаполнитьЗначенияСвойств(ОбъектCom, ВнешнееЗначение);
				ОбъектCom.Метаданные = ВнешнееЗначение.Метаданные().Имя;
				НоваяСтрока[Колонка.Имя] = Новый Структура("УникальныйИдентификатор, Объект", ПолучитьУникальныйИдентификаторComОбъекта(ВнешнееСоединение, ВнешнееЗначение), ОбъектCom);	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат ТаблицаВозврата;

КонецФункции

Функция ПолучитьУникальныйИдентификаторComОбъекта(ВнешнееСоединение, ComОбъект) Экспорт
	Возврат ВнешнееСоединение.String(ComОбъект.УникальныйИдентификатор());	 
КонецФункции

#КонецОбласти
